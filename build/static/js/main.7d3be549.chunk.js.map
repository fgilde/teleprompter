{"version":3,"sources":["Teleprompter.js","styles.js","App.js","index.js"],"names":["StyledTeleprompter","styled","div","Interim","cleanWord","word","trim","toLocaleLowerCase","replace","GlobalStyles","createGlobalStyle","StyledApp","words","progress","listening","onChange","recog","React","useRef","scrollRef","useState","results","setResults","useEffect","SpeechRecognition","window","webkitSpeechRecognition","current","continuous","interimResults","start","stop","handleResult","interim","Array","from","filter","r","isFinal","map","transcript","join","newIndex","split","reduce","memo","length","stringSimilarity","compareTwoStrings","addEventListener","removeEventListener","querySelector","scrollIntoView","behavior","block","inline","Fragment","ref","i","key","data-index","style","color","Controls","Buttons","Input","textarea","Button","button","p","secondary","css","ButtonRight","App","setListening","setWords","setProgress","intervalValue","setIntervalValue","handleListening","intervalId","clearInterval","e","target","value","onClick","setInterval","disabled","type","id","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7d3be549.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport stringSimilarity from 'string-similarity'\n\nconst StyledTeleprompter = styled.div`\n  font-size: 5.25rem;\n  width: 100%;\n  height: 24rem;\n  overflow: scroll;\n  scroll-behavior: smooth;\n  display: block;\n  margin-bottom: 1rem;\n  background-color: black;\n  color: white;\n  background-position: 0 0, 0 100%;\n  background-size: 100% 14px;\n`\n\nconst Interim = styled.div`\n  background: rgb(0, 0, 0, 0.25);\n  color: yellow;\n  flex: 0 0 auto;\n  padding: 0.5rem;\n  border-radius: 1rem;\n  display: inline-block;\n`\n\nconst cleanWord = word =>\n  word\n    .trim()\n    .toLocaleLowerCase()\n    .replace(/[^a-z]/gi, '')\n\nexport default function Teleprompter({\n  words,\n  progress,\n  listening,\n  onChange\n}) {\n  const recog = React.useRef(null)\n  const scrollRef = React.useRef(\n    null\n  )\n  const [\n    results,\n    setResults\n  ] = React.useState('')\n\n  React.useEffect(() => {\n    const SpeechRecognition =\n      window.SpeechRecognition ||\n      window.webkitSpeechRecognition\n    recog.current = new SpeechRecognition()\n    recog.current.continuous = true\n    recog.current.interimResults = true\n  }, [])\n\n  React.useEffect(() => {\n    if (listening) {\n      recog.current.start()\n    } else {\n      recog.current.stop()\n    }\n  }, [listening])\n\n  React.useEffect(() => {\n    const handleResult = ({\n      results\n    }) => {\n      const interim = Array.from(\n        results\n      )\n        .filter(r => !r.isFinal)\n        .map(r => r[0].transcript)\n        .join(' ')\n      setResults(interim)\n\n      const newIndex = interim\n        .split(' ')\n        .reduce((memo, word) => {\n          if (\n            memo >= words.length\n          ) {\n            return memo\n          }\n          const similarity = stringSimilarity.compareTwoStrings(\n            cleanWord(word),\n            cleanWord(words[memo])\n          )\n          memo +=\n            similarity > 0.75\n              ? 1\n              : 0\n          return memo\n        }, progress)\n      if (\n        newIndex > progress &&\n        newIndex <= words.length\n      ) {\n        onChange(newIndex)\n      }\n    }\n    recog.current.addEventListener(\n      'result',\n      handleResult\n    )\n    return () => {\n      recog.current.removeEventListener(\n        'result',\n        handleResult\n      )\n    }\n  }, [onChange, progress, words])\n\n  React.useEffect(() => {\n    /* eslint-disable no-unused-expressions */\n    scrollRef.current\n      .querySelector(\n        `[data-index='${\n          progress + 3\n        }']`\n      )\n      ?.scrollIntoView({\n        behavior: 'smooth',\n        block: 'nearest',\n        inline: 'start'\n      })\n  }, [progress])\n\n  return (\n    <React.Fragment>\n      <StyledTeleprompter\n        ref={scrollRef}\n      >\n        {words.map((word, i) => (\n          <span\n            key={`${word}:${i}`}\n            data-index={i}\n            style={{\n              color:\n                i < progress\n                  ? 'pink'\n                  : 'white'\n            }}\n          >\n            {word}{' '}\n          </span>\n        ))}\n      </StyledTeleprompter>\n      {results && (\n        <Interim>\n          {results}\n        </Interim>\n      )}\n    </React.Fragment>\n  )\n}\n","import styled, {\n  createGlobalStyle,\n  css\n} from 'styled-components'\nimport Teleprompter from './Teleprompter'\n\nexport const GlobalStyles = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n\n  html,\n  body,\n  #root {\n    height: 100%;\n    font-family: sans-serif;\n    margin: 0;\n    overflow: hidden;\n    background-color: black;\n    color: white;\n  }\n`\n\nexport const StyledApp = styled.div`\n  font-family: sans-serif;\n  text-align: center;\n  height: 100%;\n  height: 100vh;\n  margin: 1rem;\n`\n\nexport const StyledTeleprompter = styled(\n  Teleprompter\n)`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  height: 100%;\n`\n\nexport const Controls = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 1rem;\n`\n\nexport const Buttons = styled.div`\n  display: flex;\n  justify-content: flex-start;\n`\n\n\nexport const Input = styled.textarea`\n  height: 5rem;\n  border: 1px solid\n    rgb(0, 0, 0, 0.25);\n  padding: 0.5rem;\n  font-family: Tahoma, sans-serif;\n  background: transparent;\n  color: white;\n  margin-bottom: 1rem;\n  width: 100%;\n`\n\nexport const Button = styled.button`\n  display: inline-block;\n  border: none;\n  padding: 0.5rem 1rem;\n  margin: 0;\n  text-decoration: none;\n  background: #666ba5;\n  border: 1px solid\n    rgb(0, 0, 0, 0.25);\n  color: white;\n  font-size: 1rem;\n  cursor: pointer;\n  text-align: center;\n  transition: background 250ms\n      ease-in-out,\n    transform 150ms ease;\n  margin-right: 1rem;\n  min-width: 5rem;\n\n  ${p =>\n    p.secondary &&\n    css`\n      background: #666;\n    `}\n\n  &:last-child {\n    margin-right: 0;\n  }\n\n  &:hover,\n  &:focus {\n    transform: scale(1.1);\n  }\n\n  &:focus {\n    outline: 1px solid #fff;\n  }\n\n  &:active {\n    transform: scale(0.99);\n  }\n`\n\nexport const ButtonRight = styled.button`\n  position: absolute;\n  float: right;\n  right: 15px;\n\n  display: inline-block;\n  border: none;\n  padding: 0.5rem 1rem;\n  margin: 0;\n  text-decoration: none;\n  background: #666ba5;\n  border: 1px solid\n    rgb(0, 0, 0, 0.25);\n  color: white;\n  font-size: 1rem;\n  cursor: pointer;\n  text-align: center;\n  transition: background 250ms\n      ease-in-out,\n    transform 150ms ease;\n  margin-right: 1rem;\n  min-width: 5rem;\n\n  ${p =>\n    p.secondary &&\n    css`\n      background: #666;\n    `}\n\n  &:last-child {\n    margin-right: 0;\n  }\n\n  &:hover,\n  &:focus {\n    transform: scale(1.1);\n  }\n\n  &:focus {\n    outline: 1px solid #fff;\n  }\n\n  &:active {\n    transform: scale(0.99);\n  }\n`\n","import React, {\n  Fragment\n} from 'react'\nimport {\n  GlobalStyles,\n  StyledApp,\n  StyledTeleprompter as Teleprompter,\n  Controls,\n  Buttons,\n  Input,\n  Button,\n  ButtonRight\n} from './styles'\n\nconst INITIAL_TEXT = `Dies ist ein Beispiel und sie können den Text vorlesen und der text folgt dem was sie sagen. Beginnen sie einfach damit nachdem sie auf start geklickt haben diesen Text zu lesen und beobachten sie wie die Wörter hervorgehoben werden und wie ihnen der Text folgt.`\n\nexport default function App() {\n  const [\n    listening,\n    setListening\n  ] = React.useState(false)\n  const [\n    words,\n    setWords\n  ] = React.useState(\n    INITIAL_TEXT.split(' ')\n  )\n  const [\n    progress,\n    setProgress\n  ] = React.useState(0)\n\n  const [\n    intervalValue,\n    setIntervalValue\n  ] = React.useState(200)\n\n  const handleInput = e => {\n    setWords(\n      e.target.value.split(' ')\n    )\n    progress && setProgress(0)\n  }\n\n  const handleListening = () => {\n    if (listening) {\n      setListening(false)\n      if (window.intervalId) {\n        clearInterval(window.intervalId);\n      }\n    } else {\n      setProgress(0)\n      setListening(true)\n    }\n  }\n\n  const handleIntervalValue = e => {\n   setIntervalValue(e.target.value)\n  }\n\n  const startStatic = () => {\n    handleListening();\n    var i = progress;\n    window.intervalId = setInterval(() => setProgress(i+=1), intervalValue);\n  }\n\n  const handleReset = () =>\n    setProgress(0)\n\n  const handleChange = progress =>\n    setProgress(progress)\n\n  return (\n    <Fragment>\n      <GlobalStyles />\n      <StyledApp>\n        <Controls>\n          <Input\n            onChange={handleInput}\n            value={words.join(' ')}\n          />\n\n          <Buttons>\n            <Button\n              onClick={\n                handleListening\n              }\n            >\n              {listening\n                ? 'Stop'\n                : 'Start dynamic'}\n            </Button>\n\n            { listening ? null :\n             <Button\n              onClick={startStatic}\n              disabled={listening}\n            >\n              Start static\n            </Button>\n          }\n\n            <input type=\"text\" onChange={handleIntervalValue} id=\"interval\" value={intervalValue}></input> <p>MS</p>\n\n\n            <ButtonRight\n              onClick={handleReset}\n              disabled={listening}\n              secondary\n            >\n              Reset\n            </ButtonRight>\n\n\n          </Buttons>\n        </Controls>\n        <Teleprompter\n          words={words}\n          listening={listening}\n          progress={progress}\n          onChange={handleChange}\n        />\n      </StyledApp>\n    </Fragment>\n  )\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}